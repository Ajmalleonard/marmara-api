generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                         String        @id @default(auto()) @map("_id") @db.ObjectId
  email                      String        @unique
  password                   String
  name                       String
  lastLogin                  DateTime      @default(now())
  isVerified                 Boolean       @default(false)
  isAdmin                    Boolean       @default(false)
  resetPasswordToken         String?
  resetPasswordExpiresAt     DateTime?
  verificationToken          String?
  verificationTokenExpiresAt DateTime?
  bookings                   Booking[]
  wishlists                  Package[]     @relation(fields: [wishlistIds], references: [id])
  wishlistIds                String[]      @db.ObjectId
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  reservations               Reservation[] @relation("UserToReservation")
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  package     Package  @relation(fields: [packageId], references: [id])
  packageId   String   @db.ObjectId
  bookingDate DateTime @default(now())
  status      String   @default("pending")
  totalPrice  Float
  adults      Int
  children    Int?
  infants     Int?
  pets        Int?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Visit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  page      String
  country   String
  visitDate DateTime @default(now())
  userAgent String
  ip        String?
}

model Place {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String
  country   String
  photos    String[]
  isTop     Boolean     @default(false)
  center    Cordinates? @relation("PlaceToCordinates")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Cordinates is a composite type
model Cordinates {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  placeId   String @unique @db.ObjectId
  place     Place  @relation("PlaceToCordinates", fields: [placeId], references: [id], onDelete: Cascade)
}

model Package {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String?  @unique
  days           Int
  nights         Int
  minimum_people Int?
  maximum_people Int?
  photos         String[]
  descriptions   String
  price          Float
  destination    String
  lower_price    Float?
  featured       Boolean  @default(false)

  itinerary Itinerary[] @relation("PackageToItinerary")
  included  Included[]  @relation("PackageToIncluded")
  excluded  Excluded[]  @relation("PackageToExcluded")
  reviews   Review[]    @relation("PackageToReview")

  isMemberOnly Boolean @default(false)
  isVip        Boolean @default(false)

  likes   Int      @default(0)
  likedBy String[] @db.ObjectId

  bookings  Booking[]
  users     User[]    @relation(fields: [userIds], references: [id])
  userIds   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Itinerary {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  day        Int
  title      String
  activities Activity[] @relation("ItineraryToActivity")
  package    Package    @relation("PackageToItinerary", fields: [packageId], references: [id], onDelete: Cascade)
  packageId  String     @db.ObjectId
}

model Activity {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  itinerary   Itinerary @relation("ItineraryToActivity", fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId String    @db.ObjectId
}

model Included {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  package   Package @relation("PackageToIncluded", fields: [packageId], references: [id], onDelete: Cascade)
  packageId String  @db.ObjectId
}

model Excluded {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  package   Package @relation("PackageToExcluded", fields: [packageId], references: [id], onDelete: Cascade)
  packageId String  @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  date      DateTime @default(now())
  package   Package  @relation("PackageToReview", fields: [packageId], references: [id], onDelete: Cascade)
  packageId String   @db.ObjectId
}

model Reservation {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  userId     String            @db.ObjectId
  location   String
  startDate  String
  returnDate String
  adults     Int
  children   Int?
  rooms      Int
  name       String?
  email      String
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  user       User              @relation("UserToReservation", fields: [userId], references: [id])

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}



type Pets {
  count   Int
  type    String
  details String
}

type TravelGroup {
  adults          Int
  children        Int
  infants         Int
  countryOfOrigin String
  pets            Pets?
}

type Budget {
  min      Int
  max      Int
  currency String
}

type ContactInfo {
  email          String
  phone          String
  receiveUpdates Boolean
}

model FormattedTripData {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  destination    String
  activities     String[]
  travelGroup    TravelGroup
  budget         Budget
  contactInfo    ContactInfo
  message        String
  aiResponse     String?
  selectedImages String[]
}

model Conversation {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String              @unique
  customerName String?
  language    String?             @default("en") // en, sw (Swahili)
  status      ConversationStatus  @default(ACTIVE)
  context     ConversationContext?
  messages    Message[]
  plannerEngagements PlannerEngagement[]
  whatsappEngagements WhatsAppEngagement[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  lastMessageAt DateTime          @default(now())
  
  @@map("conversations")
}

model Message {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String      @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String
  sender         MessageSender
  messageType    MessageType @default(TEXT)
  aiResponse     String?
  responseTime   Int?        // Response time in milliseconds
  sentiment      String?     // positive, negative, neutral
  intent         String?     // travel_inquiry, booking, support, etc.
  entities       String[]    // Extracted entities like destinations, dates
  timestamp      DateTime    @default(now())
  
  @@map("messages")
}

type ConversationContext {
  customerType     String?    // new, returning, vip
  interests        String[]   // safari, beach, culture, etc.
  budget           String?    // low, medium, high
  travelDates      String?
  groupSize        Int?
  previousBookings String[]   @db.ObjectId
  preferences      Json?      // Custom preferences object
  lastIntent       String?
  conversationFlow String?    // greeting, inquiry, negotiation, booking
  isHumanTakeover  Boolean    @default(false)
  humanTakeoverAt  DateTime?
  aiPausedUntil    DateTime?
  lastHumanMessage DateTime?
  analytics        Json?      // Analytics data for conversation tracking
}

enum ConversationStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum MessageSender {
  USER
  AI
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  LOCATION
  CONTACT
}

// Planner-specific engagement tracking
model PlannerEngagement {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String   @db.ObjectId
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Plan-related metrics
  planRequested     Boolean  @default(false)
  planGenerated     Boolean  @default(false)
  planAccepted      Boolean  @default(false)
  planModified      Boolean  @default(false)
  
  // Notification tracking
  notificationSent  Boolean  @default(false)
  notificationTime  DateTime?
  
  // Plan details
  planType          String?  // e.g., "travel", "itinerary", "booking"
  planData          Json?    // Store plan details
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("planner_engagements")
}

// General WhatsApp activity engagement
model WhatsAppEngagement {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String   @db.ObjectId
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // General activity metrics
  messageCount      Int      @default(0)
  responseTime      Float?   // Average response time in seconds
  sessionDuration   Float?   // Session duration in minutes
  
  // Engagement quality
  userSatisfaction  String?  // "high", "medium", "low"
  interactionType   String?  // "inquiry", "booking", "support", "general"
  
  // Activity tracking
  lastActivity      DateTime @default(now())
  isActive          Boolean  @default(true)
  
  // Analytics data
  analytics         Json?    // Store detailed analytics 
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("whatsapp_engagements")
}

